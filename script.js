
const questions = [
  { q: "Qual dos alimentos √© mais rico em carboidratos?", a: "Arroz", options: ["Frango", "Arroz", "Queijo", "Ovo"] },
  { q: "Qual √© a principal fun√ß√£o dos carboidratos?", a: "Fornecer energia", options: ["Constru√ß√£o celular", "Fornecer energia", "Produzir horm√¥nios", "Transporte de oxig√™nio"] },
  { q: "A glicose √© um exemplo de:", a: "Monossacar√≠deo", options: ["Dissacar√≠deo", "Lip√≠dio", "Monossacar√≠deo", "Polissacar√≠deo"] },
  { q: "Qual √© um polissacar√≠deo importante encontrado nas plantas?", a: "Amido", options: ["Glicose", "Frutose", "Sacarose", "Amido"] },
  { q: "Qual destes n√£o √© um carboidrato?", a: "Colesterol", options: ["Glicog√™nio", "Lactose", "Colesterol", "Frutose"] },
  { q: "A celulose √© encontrada em:", a: "Plantas", options: ["Animais", "Plantas", "Fungos", "Bact√©rias"] },
  { q: "O carboidrato de reserva dos animais √©:", a: "Glicog√™nio", options: ["Celulose", "Amido", "Glicog√™nio", "Quitina"] },
  { q: "Qual a√ß√∫car est√° presente no leite?", a: "Lactose", options: ["Glicose", "Frutose", "Lactose", "Sacarose"] },
  { q: "A frutose √© encontrada principalmente em:", a: "Frutas", options: ["Carnes", "Frutas", "Leite", "Gr√£os"] },
  { q: "O que s√£o carboidratos simples?", a: "A√ß√∫cares com r√°pida digest√£o", options: ["Fibras vegetais", "A√ß√∫cares com r√°pida digest√£o", "Amidos complexos", "Prote√≠nas sol√∫veis"] },
  { q: "Excesso de carboidratos pode levar a:", a: "Aumento de peso", options: ["Perda muscular", "Anemia", "Aumento de peso", "Desidrata√ß√£o"] },
  { q: "P√£es, massas e cereais s√£o fontes de:", a: "Amido", options: ["Frutose", "Glicose", "Amido", "Lactose"] },
  { q: "Qual dos seguintes √© um dissacar√≠deo?", a: "Sacarose", options: ["Glicose", "Amido", "Sacarose", "Celulose"] },
  { q: "Qual carboidrato √© utilizado em solu√ß√µes intravenosas?", a: "Glicose", options: ["Glicose", "Amido", "Frutose", "Celulose"] },
  { q: "Carboidratos s√£o compostos por:", a: "Carbono, hidrog√™nio e oxig√™nio", options: ["C√°lcio e f√≥sforo", "√Åcido e base", "Carbono, hidrog√™nio e oxig√™nio", "Prote√≠nas e lip√≠dios"] }
];

let questionIndex = 0;
let playerIndex = 0;
const numPlayers = 4;
let scores = Array(numPlayers).fill(0);
let currentQuestion = null;
let timer;
let countdown = 20;

const correctSound = new Audio("https://actions.google.com/sounds/v1/cartoon/clang_and_wobble.ogg");
const wrongSound = new Audio("https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg");

function shuffle(array) {
  return [...array].sort(() => Math.random() - 0.5);
}

function startGame() {
  questionIndex = 0;
  playerIndex = 0;
  scores.fill(0);
  nextTurn();
  updateScoreTable();
}

function nextTurn() {
  if (questionIndex >= questions.length) {
    endGame();
    return;
  }

  currentQuestion = questions[questionIndex];
  document.getElementById('question').innerText = `Jogador ${playerIndex + 1}, sua vez!`;
  const playersDiv = document.getElementById('players');
  playersDiv.innerHTML = '';

  const player = document.createElement('div');
  player.className = 'player';
  player.innerHTML = `<h3>Jogador ${playerIndex + 1}</h3>
    <p>${currentQuestion.q}</p>
    <div id="options">
      ${shuffle(currentQuestion.options).map(opt =>
        `<button onclick="answer('${opt.replace(/'/g, "\\'")}')">${opt}</button>`).join('')}
    </div>
    <div class="score">Pontua√ß√£o: <span id="score">${scores[playerIndex]}</span></div>
    <p id="timer">Tempo restante: ${countdown}s</p>`;
  playersDiv.appendChild(player);

  startTimer();
}

function startTimer() {
  clearInterval(timer);
  countdown = 20;
  document.getElementById("timer").innerText = `Tempo restante: ${countdown}s`;
  timer = setInterval(() => {
    countdown--;
    document.getElementById("timer").innerText = `Tempo restante: ${countdown}s`;
    if (countdown <= 0) {
      clearInterval(timer);
      answer(null);
    }
  }, 1000);
}

function answer(selected) {
  clearInterval(timer);
  if (selected === currentQuestion.a) {
    scores[playerIndex]++;
    correctSound.play();
    alert(`‚úÖ Jogador ${playerIndex + 1} acertou!`);
  } else {
    wrongSound.play();
    alert(`‚ùå Jogador ${playerIndex + 1} errou!`);
  }

  playerIndex++;
  if (playerIndex >= numPlayers) {
    playerIndex = 0;
    questionIndex++;
  }
  updateScoreTable();
  setTimeout(nextTurn, 1000);
}

function endGame() {
  const maxScore = Math.max(...scores);
  const winners = scores.map((score, i) => score === maxScore ? i + 1 : null).filter(i => i !== null);
  let message = winners.length === 1
    ? `üéâ Fim do jogo! Jogador ${winners[0]} venceu com ${maxScore} ponto(s)!`
    : `ü§ù Empate! Jogadores ${winners.join(", ")} com ${maxScore} ponto(s)!`;
  document.getElementById("question").innerText = message;
  document.getElementById("players").innerHTML = '';
  document.getElementById("nextBtn").innerText = "Reiniciar Jogo";
  document.getElementById("nextBtn").disabled = false;
}

function updateScoreTable() {
  const table = document.getElementById("scoreboard");
  if (!table) return;
  table.innerHTML = "<h2>Pontua√ß√£o</h2>" + scores.map((score, i) =>
    `<p>Jogador ${i + 1}: ${score} ponto(s)</p>`).join("");
}


